include classpath("host_and_port")

//It' not recommend to modify the follow configurations

akka {

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "INFO"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  actor {
    provider = "akka.remote.RemoteActorRefProvider"
    warn-about-java-serializer-usage = false
  }
  serialization-bindings {
    "java.util.HashMap" = akka-misc
  }
  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = ${HOST_LOCAL.HOST}
    }
  }
}

modules {  //defined spciafic configurations of each modules, that are not exposed to users.
  wsrestservice {
    protocol="http"
    akka = ${akka} {
      remote {
        netty.tcp {
          port = ${HOST_LOCAL.PORTS.AKKA_REST_SERVICE}
        }
      }
    }
    configurations {
      host = "localhost"   //host for WS-Rest service
      port = ${HOST_LOCAL.PORTS.HTTP_PORT}       //port for WS-Rest service

      // OSSM events configurations
      events = {
        active = false   //enable/disable event handler
        actorPath = "akka.tcp://selfMonitor@"${HOST_LOCAL.HOST}":"${HOST_LOCAL.PORTS.AKKA_SELF_MONITOR}"/user/eventListener" // remote actor path of the event listener in Self Monitor module.
        max_buff_size = 512    //size of buffer in the Source of WS handler, if exceeded will raise an exception
        interval_in_second = 10  // interval in second to fetch new events from event listener actor from Self Monitor module
      }

      timeout = 5      //Timeout value in second for remote actor communication
      wsLibsPath = "${OSSM_HOME}/lib"  //where to find the jars for WS handlers
      actors = [
        {
          active = true
          name = "cm"
          path = "akka.tcp://CmEventSystem@"${HOST_LOCAL.HOST}":"${HOST_LOCAL.PORTS.AKKA_CM}"/user/monitor"
        },
        {
          active = true
          name = "dc_adapter"
          path = "akka.tcp://DcAdapter@"${HOST_LOCAL.HOST}":"${HOST_LOCAL.PORTS.AKKA_DC_ADAPTER}"/user/monitor"
        },
        {
          active = true
          name = "presenter"
          path = "akka.tcp://selfMonitorPresenter@"${HOST_LOCAL.HOST}":"${HOST_LOCAL.PORTS.AKKA_PRESENTER}"/user/monitor"
        },
        {
          active = true
          name = "umbAdapter",
          path = "akka.tcp://umbAdapter@"${HOST_LOCAL.HOST}":"${HOST_LOCAL.PORTS.AKKA_UMBADAPTER}"/user/alarmCountActor"
        },
        {
          active = true
          name = "selfMonitor",
          path = "akka.tcp://selfMonitor@"${HOST_LOCAL.HOST}":"${HOST_LOCAL.PORTS.AKKA_SELF_MONITOR}"/user/cmdListener"
        }
      ]
      wsHandlers = [
        {
          active = false
          name = "logMonitor"
          filename = "logMonitor-1.0-SNAPSHOT"
          class = "com.hpe.ossm.ws.handlers.LogMonitor"
        }
      ]
    }
  }
  //--------------------------------------------------------------------------------
  selfmonitor {
    akka = ${akka} {
      remote {
        netty.tcp {
          port = ${HOST_LOCAL.PORTS.AKKA_SELF_MONITOR}
        }
      }
    }
    configurations {
      event_listener = {
        active = false
        max_pool_size = 1024
      }
    }
    snmp_collectors {
      Avg CPU Utilization = { //collector to collect data via SNMP protocol
        active = false
        host = ${HOST_LOCAL.HOST}
        name = "Avg CPU Utilization"
        oid = ".1.3.6.1.4.1.2021.10.1.3.1"
        community = "public"
        unit = ""
        type = "get"
        description = "1 minute Load"
        interval = 60
        persistents = ["kpiAgent"]
      }
      ifInfo = {
        active = false
        host = ${HOST_LOCAL.HOST}
        name = "ifInfo"
        oid = "1.3.6.1.2.1.2.2.1.2"
        type = "walk"
        description = "Network Interface Information"
        interval = 0
        persistents = ["kpiAgent"]
      }
    }
    script_collectors {
      freeCPURate = {  //collector to collect data by executing local script file
        active = true
        host = ${HOST_LOCAL.HOST}
        name = "Free CPU Rate"
        description = "Cpu Value"
        type = "CPU"
        unit = "%"
        scriptfile = "cpu.sh"
        interval = 300
        persistents = ["kpiAgent"]
      }
      freeMemory = {
        active = true
        host = ${HOST_LOCAL.HOST}
        name = "Free Memory"
        description = "Free Memory"
        type = "Memory"
        unit = "MB"
        scriptfile = "memory.sh"
        interval = 300
        persistents = ["kpiAgent"]
      }
      serverInfo = {
        active = true
        host = ${HOST_LOCAL.HOST}
        name = "Server Info"
        description = "Server Info"
        type = "ServerInfo"
        interval = 0
        persistents = ["uoc_notification"]
      }
      ossmProcesses = {
        active = true
        host = ${HOST_LOCAL.HOST}
        name = "OSSM Processes"
        description = "Get all OSSM processes"
        type = "OssmShow"
        interval = 900
        persistents = ["uoc_notification"]
      }
    }
    h2db_collectors {
      localH2 = {
        active = true
        #db shall always on localhost
        host = "localhost"
        port = ${HOST_LOCAL.PORTS.H2_DB}
        user = "sa"
        password = ""
        name = "Row Counter per Table"
        interval = 900
        persistents = ["kpiAgent"]
        benchmark {
          active = true  //if enable execute the bench mark query
          name = "H2 benchmark"
          request = "select count(*) from public.temip_alarm"  //the benchmark query sql
          query_statistic = false  //if set QUERY_STATISTIC=1 of DB , it will provide more statistic information
        }
      }
    }
    internal_kpi_rest_request_collectors {
      numberOfFilter {
        active = true
        protocol = ${modules.wsrestservice.protocol}
        host = ${HOST_LOCAL.HOST}
        port = ${HOST_LOCAL.PORTS.HTTP_PORT}
        name = "number of filter"  //the name must has been defined in the provider module
        description = "Number of Filter"
        agent = "cm"
        interval = 60
        unit = "#"
        persistents = ["kpiAgent"]
      }
      numberOfCounter = {
        active = true
        protocol = ${modules.wsrestservice.protocol}
        host = ${HOST_LOCAL.HOST}
        port = ${HOST_LOCAL.PORTS.HTTP_PORT}
        name = "number of counters"
        description = "The count of all existing counters in DC adapter"
        agent = "dc_adapter"
        interval = 60
        unit = "#"
        persistents = ["kpiAgent"]
      }
      numberOfRequest = {
        active = true
        protocol = ${modules.wsrestservice.protocol}
        host = ${HOST_LOCAL.HOST}
        port = ${HOST_LOCAL.PORTS.HTTP_PORT}
        name = "number of requests"
        description = "Request from presenter"
        agent = "presenter"
        interval = 900
        unit = "#"
        persistents = ["kpiAgent"]
      }
      numberOfAlarm {
        active = true
        protocol = ${modules.wsrestservice.protocol}
        host = ${HOST_LOCAL.HOST}
        port = ${HOST_LOCAL.PORTS.HTTP_PORT}
        name = "number of alarm"
        description = "umb alarm statisticis"
        agent = "umbAdapter"
        interval = 900
        unit = "#"
        persistents = ["kpiAgent"]
      }
    }
    persistents {
      metrics {
        active = false
        id = "metrics"   //file will be named as <id>-yyyy-MM-dd.log
        // headers: ts,host,mo,kpi name,value type, kpi value,unit,description
        type = "file"
        path = ${OSSM_DATA}"/logs/"  //folder to store files
      }
      kpiAgent {
        active = true
        id = "kpiAgent"
        type = "remote actor"
        path = "akka.tcp://ws_rest_service@"${HOST_LOCAL.HOST}":"${HOST_LOCAL.PORTS.AKKA_REST_SERVICE}"/user/kpiListener"
      }
      uoc_notification {
        active: true
        id = "uoc_notification"
        type = "uoc notification"  //send to UOC as a notification
        presenter {
          protocol = "http"
          host = ${HOST_LOCAL.HOST}
          port = ${HOST_LOCAL.PORTS.PRESENTER}
        }
        notification {
          "id": "OSSM_Metric",
          "sendToWorkspace": "ossm-assurance-Self-Monitoring-WS"
          // "type": "data"  optional, 'data' by default
          // "origin": "plugin", optinal null by defult
          // "domain": "ossm", optinal null by default
        }
        #       localKariosDBm {
        #         active: false
        #         id = "localKariosDBm"
        #         type = "ocm_kairosdb"  //save data in a OCM KairosDB
        #         url = "http://"${HOST_LOCAL.HOST}":"${PORTS.KAIROS_DB}
        #       }
      }
    }

  }
  //--------------------------------------------------------------------------------
  umbadapter {
    akka = ${akka}{
      remote {
        netty.tcp {
          port = ${HOST_LOCAL.PORTS.AKKA_UMBADAPTER}
        }
      }
    }
    adapter {
      type = "umb_temip"
      clusteredCM = [${?HA.cmHA}]
    }
  }
  //--------------------------------------------------------------------------------
  cmglobal {
    akka = ${akka}{
      remote{
        netty.tcp {
          port = ${HOST_LOCAL.PORTS.AKKA_CM}
        }
      }
    }
  }
  //--------------------------------------------------------------------------------
  presenter {
    akka = ${akka}{
      loggers=["akka.event.Logging$DefaultLogger"]
      remote{
        netty.tcp {
          port = ${HOST_LOCAL.PORTS.AKKA_PRESENTER}
        }
      }

      quartz {
        schedules {
          forwardResult {
            description = "A cron job that fires off for check whether should sync counter to db"
            expression = "0 0 * * * ?"
          }
        }
      }
    }

    configurations {
      rest_service_host = ${modules.wsrestservice.configurations.host}
      rest_service_port = ${HOST_LOCAL.PORTS.HTTP_PORT}
    }
  }
  //--------------------------------------------------------------------------------
  sink {
    akka = ${akka}{
      remote {
        netty.tcp {
          port = ${HOST_LOCAL.PORTS.AKKA_SINK}
        }
      }
    }
  }
  //--------------------------------------------------------------------------------
  receiver {
    akka = ${akka}{
      remote {
        netty.tcp {
          port = ${HOST_LOCAL.PORTS.AKKA_RECEIVER}
          send-buffer-size = 2048000b
          receive-buffer-size = 1024000b
        }
        transport-failure-detector {
          implementation-class = "akka.remote.DeadlineFailureDetector"
          heartbeat-interval = 5 s
          acceptable-heartbeat-pause = 240 s
        }
        backoff-interval = 1s
        retry-gate-closed-for = 60 s
        system-message-buffer-size = 200000
        system-message-ack-piggyback-timeout = 1 s
      }
    }
  }
  //--------------------------------------------------------------------------------
  receiverGlobal {
    startServer = true
    ServerParam = -tcpAllowOthers
    ServerPort = ${HOST_LOCAL.PORTS.H2_DB}
    maxDBWorkerPerConsumer = 1
    remoteDataHandler {
      active = false
      path = "akka.tcp://RemoteDataHandler@"${HOST_LOCAL.HOST}":"${HOST_LOCAL.PORTS.AKKA_RECEIVER}"/user/dataHandler"
    }
    localDataHandler = "akka.tcp://ReceiverService@"${HOST_LOCAL.HOST}":"${HOST_LOCAL.PORTS.AKKA_RECEIVER}"/user/dataHandler"
  }
  //--------------------------------------------------------------------------------
  receiverConsole {
    akka = ${akka}{
      remote {
        netty.tcp {
          port = ${HOST_LOCAL.PORTS.AKKA_RECEIVER_CONSOLE}
        }
      }
    }
  }
  //--------------------------------------------------------------------------------
  dcGlobal {
    akka = ${akka}{
      actor {
        deployment {
          /dataController {
            dispatcher = "blocking-io-dispatcher"
          }
          /statistics {
            dispatcher = "blocking-io-dispatcher"
          }
          /dbActor {
            dispatcher = "my-dispatcher"
          }
        }
      }
      remote {
        netty.tcp {
          port = ${HOST_LOCAL.PORTS.AKKA_DC_ADAPTER}
          send-buffer-size = 1024000b
          receive-buffer-size = 2048000b
        }
        enabled-transports = ["akka.remote.netty.tcp"]
        transport-failure-detector {
          implementation-class = "akka.remote.DeadlineFailureDetector"
          heartbeat-interval = 5 s
          acceptable-heartbeat-pause = 240 s
        }
        watch-failure-detector {
          implementation-class = "akka.remote.PhiAccrualFailureDetector"
          heartbeat-interval = 3 s
          threshold = 15.0
          max-sample-size = 200
          min-std-deviation = 300 ms
          acceptable-heartbeat-pause = 60 s
          unreachable-nodes-reaper-interval = 1s
          expected-response-after = 3 s
        }
        backoff-interval = 1s
        retry-gate-closed-for = 60 s
        system-message-buffer-size = 200000
        system-message-ack-piggyback-timeout = 1 s
      }
      quartz {
        schedules {
          SyncDb {
            description = "A cron job that fires off for check whether should sync counter to db"
            expression = "*/5 * * ? * *"
          }
          SyncUser {
            description = "A cron job that fires off for check whether should sync counter from user to cache"
            expression = "*/5 * * ? * *"
          }
          SyncRt {
            description = "A cron job that fires off for check whether should sync counter from time relative filters"
            expression = "*/10 * * ? * *"
          }
        }
      }
    }
    blocking-io-dispatcher {
      type = "Dispatcher"
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 64
      }
      throughput = 1
    }
    my-dispatcher {
      type = Dispatcher
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 1
        parallelism-factor = 3.0
        parallelism-max = 16
      }
      throughput = 100
    }
    dc {
      dbActorNumber = 1
      dimActorNumber = 1
      syncActorNumber = 5
      ignoreCase = true
      initQryBulkSize = 100
      initQryInterval = 1000
      startH2 = true
      tcpPort = ${HOST_LOCAL.PORTS.DC_TCP}
      database {
        username = sa
        connectionPool {
          initialsize = 10
          maxtotal = 10
          maxwaitmillis = 60000
        }
      }
      # For HA setup:
      clusteredCM = [
        ${?HA.cmHA}
      ]
    }
  }
  //--------------------------------------------------------------------------------
  bulkOperation{
    akka = ${akka}{
      remote {
        netty.tcp {
          port = ${HOST_LOCAL.PORTS.AKKA_BULK_OP}
        }
      }
    }
    slick-h2 {
      profile = "slick.jdbc.H2Profile$"
      db {
        connectionPool = disabled
        dataSourceClass = "slick.jdbc.DriverDataSource"
        properties = {
          driver = "org.h2.Driver"
          url = "jdbc:h2:tcp://localhost:"${HOST_LOCAL.PORTS.H2_CM_DB}"/"${OSSM_DATA}"/db/uoc_umm_md5"
          user = "sa"
        }
      }
    }
    slick-receiver {
      profile = "slick.jdbc.H2Profile$"
      db {
        connectionPool = disabled
        dataSourceClass = "slick.jdbc.DriverDataSource"
        properties = {
          driver = "org.h2.Driver"
          url = "jdbc:h2:tcp://localhost:"${HOST_LOCAL.PORTS.H2_DB}"/mem:uocCenterPool"
          user = "sa"
        }
      }
    }
    presenter {
      protocol = ${HOST_PRESENTER.PROTOCOL}
      host =${HOST_PRESENTER.HOST}
      port = ${HOST_PRESENTER.PORT}
    }
    ossm_cluster {
      otherBulkOpAdapters = [${?HA.bulkHA}]
    }
  }
  //--------------------------------------------------------------------------------
  //--------------------------------------------------------------------------------
}