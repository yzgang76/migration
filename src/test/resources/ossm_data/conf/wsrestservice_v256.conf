# In this file you can override any option defined in the reference files.
# Copy in parts of the reference files and modify as you please.
HOST="localhost"
PORTS{
  REMOTE_SELF_MONITOR=3713
  REMOTE_REST_SERVICE=4741
  REMOTE_UMBADAPTER=4745
  REMOTE_CM=5556
  REMOTE_DC_ADAPTER=5555
  REMOTE_PRESENTER=3733
  HTTP_PORT=18081
  KAIROS_DB=8080
  H2_DB=9093
}

akka {

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  //  actor {
  //    provider = "cluster"
  //
  //    default-dispatcher {
  //      # Throughput for default Dispatcher, set to 1 for as fair as possible
  //      throughput = 10
  //    }
  //  }
  actor {
    provider = "akka.remote.RemoteActorRefProvider"
    warn-about-java-serializer-usage = false
  }
  remote {
    # The port clients should connect to. Default is 2552.
    netty.tcp {
      hostname = ${HOST}
      port = ${PORTS.REMOTE_REST_SERVICE}
    }
  }
}
configurations {
  host = ${HOST}   //host for WS-Rest service
  port = ${PORTS.HTTP_PORT}       //port for WS-Rest service

  // OSSM events configurations
  events = {
    active = false   //enable/disable event handler
    actorPath = "akka.tcp://selfMonitor@"${HOST}":"${PORTS.REMOTE_SELF_MONITOR}"/user/eventListener" // remote actor path of the event listener in Self Monitor module.
    max_buff_size = 512    //size of buffer in the Source of WS handler, if exceeded will raise an exception
    interval_in_second = 10  // interval in second to fetch new events from event listener actor from Self Monitor module
  }

  timeout = 5      //Timeout value in second for remote actor communication
  wsLibsPath = "${OSSM_HOME}/lib"  //where to find the jars for WS handlers
  actors = [
    {
      active = true
      name = "cm"
      path = "akka.tcp://CmEventSystem@"${HOST}":"${PORTS.REMOTE_CM}"/user/monitor"
    },
    {
      active = true
      name = "dc_adapter"
      path = "akka.tcp://DcAdapter@"${HOST}":"${PORTS.REMOTE_DC_ADAPTER}"/user/monitor"
    },
    {
      active=true
      name="presenter"
      path="akka.tcp://selfMonitorPresenter@"${HOST}":"${PORTS.REMOTE_PRESENTER}"/user/monitor"
    },
    {
      active=true
      name = "umbAdapter",
      path = "akka.tcp://umbAdapter@"${HOST}":"${PORTS.REMOTE_UMBADAPTER}"/user/alarmCountActor"
    },
    {
      active=true
      name = "selfMonitor",
      path = "akka.tcp://selfMonitor@"${HOST}":"${PORTS.REMOTE_SELF_MONITOR}"/user/cmdListener"
    }
  ]
  wsHandlers = [
    {
      active = false
      name = "logMonitor"
      filename = "logMonitor-1.0-SNAPSHOT"
      class = "com.hpe.ossm.ws.handlers.LogMonitor"
    }
  ]
}