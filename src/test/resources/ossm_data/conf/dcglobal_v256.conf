dc {
	dimensions = ["temip_alarm"]
	dbActorNumber = 1
	dimActorNumber = 1
	syncActorNumber = 5
	ignoreCase = true
	initQryBulkSize = 100
	initQryInterval = 1000
	startH2 = true
	tcpPort = 29292
	database{
		username = sa
		connectionPool {
			initialsize = 10
			maxtotal = 10
			maxwaitmillis = 60000
		}
	}

//        For HA setup:
    clusteredCM = [
     {
       host = "16.17.100.100"
       port = "5556"
     }
   ]
}

blocking-io-dispatcher {
    type = "Dispatcher"
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 64
    }
    throughput = 1
}

my-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 1
    parallelism-factor = 3.0
    parallelism-max = 16
  }
  throughput = 100
}

akka {

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "ERROR"
  stdout-loglevel = "ERROR"

  actor {
    provider = "akka.remote.RemoteActorRefProvider"
	deployment {
	  /dataController {
        dispatcher = "blocking-io-dispatcher"
      }
	  /userActors {
        dispatcher = "blocking-io-dispatcher"
      }
	  /dbActor {
	    dispatcher = "my-dispatcher"
	  }
	}
  }

  remote {
    netty.tcp {
      hostname = "16.17.100.101"
      port=5555
      send-buffer-size = 1024000b
      receive-buffer-size = 2048000b
    }
    enabled-transports = ["akka.remote.netty.tcp"]
	transport-failure-detector {
      implementation-class = "akka.remote.DeadlineFailureDetector"
      heartbeat-interval = 5 s
      acceptable-heartbeat-pause = 240 s
    }
	watch-failure-detector {
      implementation-class = "akka.remote.PhiAccrualFailureDetector"
      heartbeat-interval = 3 s
      threshold = 15.0
      max-sample-size = 200
      min-std-deviation = 300 ms
      acceptable-heartbeat-pause = 60 s
      unreachable-nodes-reaper-interval = 1s
      expected-response-after = 3 s
    }
	backoff-interval = 1s
	retry-gate-closed-for = 60 s
	system-message-buffer-size = 200000
	system-message-ack-piggyback-timeout = 1 s
  }
  
  quartz {
    schedules {
      SyncDb {
        description = "A cron job that fires off for check whether should sync counter to db"
        expression = "*/5 * * ? * *"
      }
	  SyncUser {
        description = "A cron job that fires off for check whether should sync counter from user to cache"
        expression = "*/5 * * ? * *"
      }
	  SyncRt {
        description = "A cron job that fires off for check whether should sync counter from time relative filters"
        expression = "*/10 * * ? * *"
      }
    }
  }
}
