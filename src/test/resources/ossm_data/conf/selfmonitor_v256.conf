# In this file you can override any option defined in the reference files.
# Copy in parts of the reference files and modify as you please.

HOST = "localhost"
PORTS = {
  REMOTE_SELF_MONITOR = 3713
  REMOTE_REST_SERVICE = 4741
  PRESENTER=8080
  KAIROS_DB = 8080  //default port impact with presenter
  H2_DB = 9093
  HTTP_PORT=18081
}
akka {

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  //  actor {
  //    provider = "cluster"
  //
  //    default-dispatcher {
  //      # Throughput for default Dispatcher, set to 1 for as fair as possible
  //      throughput = 10
  //    }
  //  }
  actor {
    provider = "akka.remote.RemoteActorRefProvider"
    warn-about-java-serializer-usage = false
  }
  remote {
    # The port clients should connect to. Default is 2552.
    netty.tcp {
      hostname = ${HOST}
      port = ${PORTS.REMOTE_SELF_MONITOR}
    }
  }
}
configurations {
  snmp_collectors = [{ //collector to collect data via SNMP protocol
    active = false
    host = ${HOST}
    name = "Avg CPU Utilization"
    oid = ".1.3.6.1.4.1.2021.10.1.3.1"
    community = "public"
    unit = ""
    type = "get"
    description = "1 minute Load"
    interval = 60
    persistents = ["kpiAgent"]
  }, {
    active = false
    host = ${HOST}
    name = "ifInfo"
    oid = "1.3.6.1.2.1.2.2.1.2"
    type = "walk"
    description = "Network Interface Information"
    interval = 0
    persistents = ["kpiAgent"]
  }],
  script_collectors = [{  //collector to collect data by executing local script file
    active = true
    host = ${HOST}
    name = "Free CPU Rate"
    description = "Cpu Value"
    type = "CPU"
    unit = "%"
    scriptfile = "cpu.sh"
    interval = 300
    persistents = ["kpiAgent"]
  }, {
    active = true
    host = ${HOST}
    name = "Free Memory"
    description = "Free Memory"
    type = "Memory"
    unit = "MB"
    scriptfile = "memory.sh"
    interval = 300
    persistents = ["kpiAgent"]
  }, {
    active = true
    host = ${HOST}
    name = "Server Info"
    description = "Server Info"
    type = "ServerInfo"
    interval = 0
    persistents = ["uoc_notification"]
  }, {
    active = true
    host = ${HOST}
    name = "OSSM Processes"
    description = "Get all OSSM processes"
    type = "OssmShow"
    interval = 900
    persistents = ["uoc_notification"]
  }]
  h2db_collectors = [   //collector for h2 database
    {
      active = true
      host = ${HOST}
      port = ${PORTS.H2_DB}
      user = "sa"
      password = ""
      name = "Row Counter per Table"
      interval = 900
      persistents = ["kpiAgent"]
      benchmark {
        active = true  //if enable execute the bench mark query
        name = "H2 benchmark"
        request = "select * from TOPO_MAP_UNACK_BY_MO where unack_alarm_key='Demo:Link 2|6'"  //the benchmark query sql
        query_statistic = false  //if set QUERY_STATISTIC=1 of DB , it will provide more statistic information
      }
    }
  ]
  internal_kpi_rest_request_collectors = [  //collect via internal REST Service like http://localhost:18081/actor/test/message/kpiRequest?kpiname=number of alarm
    {
      active = true
      protocol = "http"
      host = ${HOST}
      port = ${PORTS.HTTP_PORT}
      name = "number of filter"  //the name must has been defined in the provider module
      description = "Number of Filter"
      agent = "cm"
      interval = 60
      unit = "#"
      persistents = ["kpiAgent"]
    },
    {
      active = true
      protocol = "http"
      host = ${HOST}
      port = ${PORTS.HTTP_PORT}
      name = "number of counters"
      description = "The count of all existing counters in DC adapter"
      agent = "dc_adapter"
      interval = 60
      unit = "#"
      persistents = ["kpiAgent"]
    },
    {
      active = true
      protocol = "http"
      host = ${HOST}
      port = ${PORTS.HTTP_PORT}
      name = "number of requests"
      description = "Request from presenter"
      agent = "presenter"
      interval = 900
      unit = "#"
      persistents = ["kpiAgent"]
    },
    {
      active = true
      protocol = "http"
      host = ${HOST}
      port = ${PORTS.HTTP_PORT}
      name = "number of alarm"
      description = "umb alarm statisticis"
      agent = "umbAdapter"
      interval = 900
      unit = "#"
      persistents = ["kpiAgent"]
    }
  ]
  persistents = [{
    active = false
    id = "metrics"   //file will be named as <id>-yyyy-MM-dd.log
                     // headers: ts,host,mo,kpi name,value type, kpi value,unit,description
    type = "file"
    path = "${OSSM_DATA}/logs/"  //folder to store files
    },
    {
      active = true
      id = "kpiAgent"
      type = "remote actor"
      path = "akka.tcp://ws_rest_service@"${HOST}":"${PORTS.REMOTE_REST_SERVICE}"/user/kpiListener"
    },
    {
      active: false
      id = "localKariosDBm"
      type = "ocm_kairosdb"  //save data in a OCM KairosDB
      url = "http://"${HOST}":"${PORTS.KAIROS_DB}
    },
    {
      active: true
      id = "uoc_notification"
      type = "uoc notification"  //send to UOC as a notification
      presenter{
        protocol="http"
        host=${HOST}
        port=${PORTS.PRESENTER}
      }
      notification{
        "id": "OSSM_Metric",
        "sendToWorkspace":"ossm-assurance-Self-Monitoring-WS"
        // "type": "data"  optional, 'data' by default
        // "origin": "plugin", optinal null by defult
        // "domain": "ossm", optinal null by default
      }
    }]
    event_listener = {
      active = false
      max_pool_size = 1024
    }
}